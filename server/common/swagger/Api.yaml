swagger: "2.0"
info:
  version: 1.0.0
  title: react-todo-backend
  description: API for backend todoist clone. 
basePath: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: Specification
    description: The swagger API specification

consumes:
  - application/json
produces:
  - application/json


definitions:
  User:
    type: object
    title: user
    required:
      - firstName
      - lastName
      - handle
      - email
      - password
    properties:
      firstName:
        type: string
        example: Johnny
      lastName:
        type: string
        example: Test
      handle:
        type: string
        example: TopJohann28
      email:
        type: string
        example: someuser@example.com
      password:
        type: string
        example: testPassword (don't actually use this please)
  Task:
    type: object
    title: task
    required:
      - email
      - text
    properties:
      project:
        type: string
        example: Chores
      email:
        type: string
        example: sample.user@something.com
      text:
        type: string
        example: Do dishes. 

paths:
  /login:
    post:
      tags:
        - Login 
      description: login into the todo API
      responses: 
        200:
          description: user successfully logged in
  /signup:
    post:
      tags:
        - SignIn
      description: sign user into todo app
      consume:
        - application/json
      parameters:
        - in: body 
          name: user
          description: The user signing up
          schema:
            type: object
            required:
              - firstName
              - lastName
              - handle
              - email
              - password
            properties:
              firstName:
                type: string
              lastName:
                type: string
              handle:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        201:
          description: user created
  /task:
    post:
      tags:
        - Task
      description: save task
      consume:
        - application/json
      parameters:
        - in: body 
          name: task
          description: The task to be saved
          schema:
            type: object
            required:
              - email
              - text
            properties:
              project:
                type: string
              text:
                type: string
              email:
                type: string
  /task/{id}:
    parameters:
    - in: path
      name: id
      description: id of task.
      required: true
    delete:
      tags:
        - Task
      description: Deletes task from data store. 
      responses:
        204:
          description: Task deleted.    
    put:
      description: save task
      parameters:
        - in: path
          name: id
        - in: body 
          name: task
          description: The task to be saved
          schema:
            type: object
            required:
              - email
              - text
            properties:
              project:
                type: string
              text:
                type: string
              email:
                type: string
      responses:
        204:
          description: Task updated. 
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification